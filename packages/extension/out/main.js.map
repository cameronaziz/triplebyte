{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import path from 'path';\nimport { commands, ExtensionContext, FileType, Terminal, Uri, window, workspace } from 'vscode';\n\nconst getWorkspaceUris = (): Uri[] => {\n  const folders = workspace.workspaceFolders\n\n  if (!folders) {\n    return [];\n  }\n\n  return folders.map((folder) => folder.uri)\n};\n\nconst readDir = async (uri: Uri) => {\n  const response = await workspace.fs.readDirectory(uri);\n  const uris = response\n    .filter(([name]) => !name.startsWith('.') &&  !name.startsWith('node_modules'))\n  .map(([name, type]) => Uri.file(path.join(uri.fsPath, name)))\n  return packageJson(uris);\n}\n\nconst packageJson = async (uris: Uri[]): Promise<Uri[]> => {\n  const data: Uri[] = []\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i]\n    const stats = await workspace.fs.stat(uri);\n    switch (stats.type) {\n      case FileType.Directory: {\n        const response = await readDir(uri);\n        data.push(...response);\n      }\n      case FileType.File: {\n        if (uri.path.endsWith('package.json')) {\n          data.push(uri);\n        }\n      }\n\n    }\n  }\n  return data;\n};\n\nconst parse = async (uri: Uri[], terminal: Terminal): Promise<string[]> => {\n  const promises = uri\n    .map(async (uri) => {\n      const file = await workspace.fs.readFile(uri);\n      const parsed = JSON.parse(file.toString());\n      if (parsed.bin) {\n        terminal.sendText(`cd ${uri.fsPath.split('/').slice(0, -1).join('/')}`);\n        return Object.keys(parsed.bin)\n      }\n    })\n  const data = await Promise.all(promises)\n  const result = data\n    .filter((item): item is string[] => !!item)\n    .reduce((acc, curr) => acc.concat(curr), [])\n  console.log(result)\n  return result;\n}\n\nconst run = async () => {\n  const uris = getWorkspaceUris();\n  if (uris.length < 1) {\n    window.showErrorMessage('No workspace found');\n    return;\n  }\n\n  const terminal = window.createTerminal({\n    name: 'Tetris',\n    shellPath: 'bash',\n    location: 1,\n  });\n\n  const pj = await packageJson(uris, );\n  await parse(pj, terminal)\n  terminal.show();\n  commands.executeCommand('workbench.action.toggleMaximizedPanel');\n  terminal.sendText(\"tb\")\n}\n\n\nexport const activate = (context: ExtensionContext) => {\n  run()\n};\n\nexport const deactivate = () => {\n\t// Methods executed when extension is deactivated.\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,oBAAuF;AAEvF,IAAM,mBAAmB,MAAa;AACpC,QAAM,UAAU,wBAAU;AAE1B,MAAI,CAAC,SAAS;AACZ,WAAO,CAAC;AAAA,EACV;AAEA,SAAO,QAAQ,IAAI,CAAC,WAAW,OAAO,GAAG;AAC3C;AAEA,IAAM,UAAU,CAAO,QAAa;AAClC,QAAM,WAAW,MAAM,wBAAU,GAAG,cAAc,GAAG;AACrD,QAAM,OAAO,SACV,OAAO,CAAC,CAAC,UAAU,CAAC,KAAK,WAAW,GAAG,KAAM,CAAC,KAAK,WAAW,cAAc,CAAC,EAC/E,IAAI,CAAC,CAAC,MAAM,UAAU,kBAAI,KAAK,oBAAK,KAAK,IAAI,QAAQ,IAAI,CAAC,CAAC;AAC5D,SAAO,YAAY,IAAI;AACzB;AAEA,IAAM,cAAc,CAAO,SAAgC;AACzD,QAAM,OAAc,CAAC;AACrB,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAM,MAAM,KAAK;AACjB,UAAM,QAAQ,MAAM,wBAAU,GAAG,KAAK,GAAG;AACzC,YAAQ,MAAM;AAAA,WACP,uBAAS,WAAW;AACvB,cAAM,WAAW,MAAM,QAAQ,GAAG;AAClC,aAAK,KAAK,GAAG,QAAQ;AAAA,MACvB;AAAA,WACK,uBAAS,MAAM;AAClB,YAAI,IAAI,KAAK,SAAS,cAAc,GAAG;AACrC,eAAK,KAAK,GAAG;AAAA,QACf;AAAA,MACF;AAAA;AAAA,EAGJ;AACA,SAAO;AACT;AAEA,IAAM,QAAQ,CAAO,KAAY,aAA0C;AACzE,QAAM,WAAW,IACd,IAAI,CAAO,SAAQ;AAClB,UAAM,OAAO,MAAM,wBAAU,GAAG,SAAS,IAAG;AAC5C,UAAM,SAAS,KAAK,MAAM,KAAK,SAAS,CAAC;AACzC,QAAI,OAAO,KAAK;AACd,eAAS,SAAS,MAAM,KAAI,OAAO,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,GAAG;AACtE,aAAO,OAAO,KAAK,OAAO,GAAG;AAAA,IAC/B;AAAA,EACF,EAAC;AACH,QAAM,OAAO,MAAM,QAAQ,IAAI,QAAQ;AACvC,QAAM,SAAS,KACZ,OAAO,CAAC,SAA2B,CAAC,CAAC,IAAI,EACzC,OAAO,CAAC,KAAK,SAAS,IAAI,OAAO,IAAI,GAAG,CAAC,CAAC;AAC7C,UAAQ,IAAI,MAAM;AAClB,SAAO;AACT;AAEA,IAAM,MAAM,MAAY;AACtB,QAAM,OAAO,iBAAiB;AAC9B,MAAI,KAAK,SAAS,GAAG;AACnB,yBAAO,iBAAiB,oBAAoB;AAC5C;AAAA,EACF;AAEA,QAAM,WAAW,qBAAO,eAAe;AAAA,IACrC,MAAM;AAAA,IACN,WAAW;AAAA,IACX,UAAU;AAAA,EACZ,CAAC;AAED,QAAM,KAAK,MAAM,YAAY,IAAM;AACnC,QAAM,MAAM,IAAI,QAAQ;AACxB,WAAS,KAAK;AACd,yBAAS,eAAe,uCAAuC;AAC/D,WAAS,SAAS,IAAI;AACxB;AAGO,IAAM,WAAW,CAAC,YAA8B;AACrD,MAAI;AACN;AAEO,IAAM,aAAa,MAAM;AAEhC;",
  "names": []
}
